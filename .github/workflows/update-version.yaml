name: merge upstream version -> PR

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: "owner/repo of upstream (e.g. upstreamOrg/project)"
        required: false
        default: ""
      upstream_tag:
        description: "Tag name to merge from upstream (e.g. v1.2.3)"
        required: true
      target_branch:
        description: "Your fork branch to receive the merge (e.g. main)"
        default: "main"
        required: false
      strategy_option:
        description: "Optional merge strategy option (e.g. theirs, ours)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write
  actions: write
jobs:
  merge-upstream-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your fork (with full history)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add and fetch upstream
        run: |
          git remote add upstream https://github.com/danny-avila/LibreChat.git
          git fetch upstream --tags --prune

      - name: Resolve upstream tag commit
        id: resolve_tag
        run: |
          TAG="${{ github.event.inputs.upstream_tag }}"
          if [ -z "$TAG" ]; then
            echo "::error::TAG environment variable is not set."
            exit 1
          fi
          echo "Resolving tag '$TAG' in upstream..."
          # Try peeled SHA for annotated tags first
          SHA="$(git ls-remote --tags upstream "$TAG^{}" | awk '{print $1}')"
          if [ -z "$SHA" ]; then
            SHA="$(git ls-remote --tags upstream "$TAG" | awk '{print $1}')"
          fi
          if [ -z "$SHA" ]; then
            echo "::error::Tag '$TAG' not found in upstream '${{ steps.upstream.outputs.repo }}'."
            exit 1
          fi
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Upstream tag '$TAG' resolves to $SHA"

      - name: Merge upstream tag (excluding workflows)
        id: merge
        continue-on-error: true
        env:
          STRAT: ${{ github.event.inputs.strategy_option }}
          SHA: ${{ steps.resolve_tag.outputs.sha }}
        run: |
          # Build merge command
          if [ -n "$STRAT" ]; then
            echo "Using merge strategy option: -X $STRAT"
            set -x
            git merge --no-ff -X "$STRAT" --no-edit "$SHA"
          else
            set -x
            git merge --no-ff --no-edit "$SHA"
          fi

          # Restore your original workflow files from main branch
          echo "Restoring original workflow files from ${{ github.event.inputs.target_branch }}..."
          git restore --source=origin/${{ github.event.inputs.target_branch }} .github/workflows/
          git add .github/workflows/
          git commit -m "Restore workflow files from main to avoid workflow changes"

      - name: Handle merge conflicts (abort & mark)
        if: steps.merge.outcome == 'failure'
        run: |
          echo "Merge had conflicts. Aborting merge to keep repo clean."

          # Get list of conflicted files
          echo "## Merge Conflicts Report" > MERGE_CONFLICTS.md
          echo "" >> MERGE_CONFLICTS.md
          echo "The following files have merge conflicts that need manual resolution:" >> MERGE_CONFLICTS.md
          echo "" >> MERGE_CONFLICTS.md

          # List conflicted files
          git status --porcelain | grep "^UU\|^AA\|^DD" | while read status file; do
            echo "- \`$file\` (status: $status)" >> MERGE_CONFLICTS.md
          done
          
          echo "" >> MERGE_CONFLICTS.md
          echo "### Instructions:" >> MERGE_CONFLICTS.md
          echo "1. Check out this branch locally" >> MERGE_CONFLICTS.md
          echo "2. Resolve conflicts in the files listed above" >> MERGE_CONFLICTS.md
          echo "3. Run \`git add <resolved-files>\`" >> MERGE_CONFLICTS.md
          echo "4. Run \`git commit\` to complete the merge" >> MERGE_CONFLICTS.md
          echo "5. Push the resolved changes" >> MERGE_CONFLICTS.md

           # Add all files including conflicted ones
          git add -A

          # Commit the conflicted state (this completes the merge with conflicts preserved)
          git -c core.editor=true commit --no-edit || git commit -m "WIP: merge upstream ${{ github.event.inputs.upstream_tag }} with conflicts"

          echo "::warning::Merge conflicts detected. Opening a DRAFT PR to signal manual resolution."
          # Make a placeholder commit so the PR shows context (optional)
          echo "Upstream tag ${{ github.event.inputs.upstream_tag }} merge needs manual resolution" > MERGE_CONFLICTS.txt
          git add MERGE_CONFLICTS.txt
          git commit -m "chore: upstream ${{github.event.inputs.upstream_tag }} merge needs manual resolution"
          
      - name: Compute display values
        id: display
        run: |
          if [ -n "${{ github.event.inputs.strategy_option }}" ]; then
            echo "strategy=${{ github.event.inputs.strategy_option }}" >> $GITHUB_OUTPUT
          else
            echo "strategy=default (recursive)" >> $GITHUB_OUTPUT
          fi

      - name: Create PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          branch: sync-upstream-${{ github.event.inputs.upstream_tag }}-${{ github.run_id }}
          base: ${{ github.event.inputs.target_branch }}
          title: "Merge upstream tag: ${{ github.event.inputs.upstream_tag }}"
          body: |
            This PR merges upstream tag **${{ github.event.inputs.upstream_tag }}** from danny-avila/LibreChat.git into `${{ github.event.inputs.target_branch }}`.

            - Triggered by: `${{ github.actor }}`
            - Strategy option: `${{ steps.display.outputs.strategy }}`
            - Workflows restored from base branch to avoid altering CI.

            ${{ steps.merge.outcome == 'failure' && '⚠️ Merge conflicts occurred; manual resolution required.' || '✅ Merge succeeded.' }}
          draft: ${{ steps.merge.outcome == 'failure' }}
          labels: |
            upstream-sync
