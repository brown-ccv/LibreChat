name: Sync Upstream PR

on:
  workflow_dispatch:
    inputs:
      upstream_tag:
        description: "Upstream tag to merge (e.g. v1.2.3)"
        required: true
      target_branch:
        description: "Target branch in your fork"
        default: "main"
        required: false
      merge_strategy:
        description: "Merge strategy (ours, theirs, or leave empty for default)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout origin repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote and fetch
        run: |
          git remote add upstream https://github.com/danny-avila/LibreChat.git
          git fetch upstream --tags --prune

      - name: Validate upstream tag
        id: validate_tag
        run: |
          TAG="${{ github.event.inputs.upstream_tag }}"
          echo "Checking if tag '$TAG' exists in upstream..."
          
          # Check if tag exists
          if git ls-remote --tags upstream | grep -q "refs/tags/$TAG"; then
            echo "Tag '$TAG' found in upstream"
            # Get the commit SHA for the tag
            SHA=$(git ls-remote --tags upstream "refs/tags/$TAG" | cut -f1)
            echo "tag_sha=$SHA" >> $GITHUB_OUTPUT
            echo "Tag SHA: $SHA"
          else
            echo "::error::Tag '$TAG' not found in upstream repository"
            exit 1
          fi

      - name: Create sync branch
        id: create_branch
        run: |
          SYNC_BRANCH="sync/upstream-${{ github.event.inputs.upstream_tag }}-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$SYNC_BRANCH" >> $GITHUB_OUTPUT
          
          # Create new branch from target branch
          git checkout -b "$SYNC_BRANCH" "origin/${{ github.event.inputs.target_branch }}"
          echo "Created branch: $SYNC_BRANCH"

      - name: Merge upstream tag
        id: merge_upstream
        continue-on-error: true
        run: |
          TAG="${{ github.event.inputs.upstream_tag }}"
          STRATEGY="${{ github.event.inputs.merge_strategy }}"
          
          echo "Merging upstream tag: $TAG"
          
          if [ -n "$STRATEGY" ]; then
            echo "Using merge strategy: $STRATEGY"
            git merge --no-ff -X "$STRATEGY" --no-edit "$TAG" -- . ':!.github/workflows'
          else
            echo "Using default merge strategy"
            git merge --no-ff --no-edit "$TAG" -- . ':!.github/workflows'
          fi

      - name: Create sync summary
        run: |
          # Create a summary file to document the sync
          echo "# Upstream Sync Summary" > SYNC_SUMMARY.md
          echo "" >> SYNC_SUMMARY.md
          echo "- **Upstream tag**: ${{ github.event.inputs.upstream_tag }}" >> SYNC_SUMMARY.md
          echo "- **Target branch**: ${{ github.event.inputs.target_branch }}" >> SYNC_SUMMARY.md
          echo "- **Merge strategy**: ${{ github.event.inputs.merge_strategy || 'default' }}" >> SYNC_SUMMARY.md
          echo "- **Sync date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> SYNC_SUMMARY.md
          echo "- **Merge status**: ${{ steps.merge_upstream.outcome == 'failure' && 'Failed (conflicts)' || 'Success' }}" >> SYNC_SUMMARY.md
          
          if [ "${{ steps.merge_upstream.outcome }}" = "success" ]; then
            echo "" >> SYNC_SUMMARY.md
            echo "✅ **Clean merge completed successfully**" >> SYNC_SUMMARY.md
            echo "" >> SYNC_SUMMARY.md
            echo "The upstream changes have been successfully merged into this branch." >> SYNC_SUMMARY.md
          fi
          
          git add SYNC_SUMMARY.md
          git commit -m "docs: add sync summary for upstream ${{ github.event.inputs.upstream_tag }}"

      - name: Handle merge conflicts
        if: steps.merge_upstream.outcome == 'failure'
        run: |
          echo "::warning::Merge conflicts detected during upstream sync"
          
          # Check if we're in the middle of a merge and abort if possible
          if [ -f .git/MERGE_HEAD ]; then
            echo "Aborting merge in progress..."
            git merge --abort
          else
            echo "No merge in progress to abort"
          fi
          
          # Update sync summary to reflect conflicts
          echo "" >> SYNC_SUMMARY.md
          echo "⚠️ **Merge conflicts detected**" >> SYNC_SUMMARY.md
          echo "" >> SYNC_SUMMARY.md
          echo "This PR has been created as a draft for manual conflict resolution." >> SYNC_SUMMARY.md
          
          # Create a conflict marker file
          echo "# Merge Conflicts Detected" > MERGE_CONFLICTS.md
          echo "" >> MERGE_CONFLICTS.md
          echo "The merge of upstream tag \`${{ github.event.inputs.upstream_tag }}\` into \`${{ github.event.inputs.target_branch }}\` resulted in conflicts." >> MERGE_CONFLICTS.md
          echo "" >> MERGE_CONFLICTS.md
          echo "This PR has been created as a draft. Please resolve conflicts manually:" >> MERGE_CONFLICTS.md
          echo "1. Clone this branch locally" >> MERGE_CONFLICTS.md
          echo "2. Add upstream remote: \`git remote add upstream https://github.com/danny-avila/LibreChat.git\`" >> MERGE_CONFLICTS.md
          echo "3. Fetch upstream: \`git fetch upstream --tags\`" >> MERGE_CONFLICTS.md
          echo "4. Run: \`git merge ${{ github.event.inputs.upstream_tag }}\`" >> MERGE_CONFLICTS.md
          echo "5. Resolve conflicts and commit" >> MERGE_CONFLICTS.md
          echo "6. Push changes and mark PR as ready for review" >> MERGE_CONFLICTS.md
          
          git add SYNC_SUMMARY.md MERGE_CONFLICTS.md
          git commit -m "chore: mark conflicts for upstream ${{ github.event.inputs.upstream_tag }} merge"

      - name: Push sync branch
        run: |
          git push origin "${{ steps.create_branch.outputs.branch_name }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          branch-token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create_branch.outputs.branch_name }}
          base: ${{ github.event.inputs.target_branch }}
          title: "🔄 Sync upstream: ${{ github.event.inputs.upstream_tag }}"
          body: |
            ## Upstream Sync: ${{ github.event.inputs.upstream_tag }}
            
            This PR syncs the upstream tag `${{ github.event.inputs.upstream_tag }}` from [danny-avila/LibreChat](https://github.com/danny-avila/LibreChat) into `${{ github.event.inputs.target_branch }}`.
            
            ### Details
            - **Upstream tag**: `${{ github.event.inputs.upstream_tag }}`
            - **Target branch**: `${{ github.event.inputs.target_branch }}`
            - **Merge strategy**: `${{ github.event.inputs.merge_strategy || 'default' }}`
            - **Triggered by**: @${{ github.actor }}
            
            ### Status
            ${{ steps.merge_upstream.outcome == 'failure' && '⚠️ **Merge conflicts detected** - This PR requires manual resolution' || '✅ **Clean merge** - Ready for review' }}
            
            ---
            *Automated upstream sync via GitHub Actions*
          draft: ${{ steps.merge_upstream.outcome == 'failure' }}
          labels: |
            upstream-sync
            automated
