name: Sync Upstream PR

on:
  workflow_dispatch:
    inputs:
      upstream_tag:
        description: "Upstream tag to merge (e.g. v1.2.3)"
        required: true
      target_branch:
        description: "Target branch in your fork"
        default: "main"
        required: false
      merge_strategy:
        description: "Merge strategy (ours, theirs, or leave empty for default)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout origin repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote and fetch
        run: |
          git remote add upstream https://github.com/danny-avila/LibreChat.git
          
          # Fetch the specific tag with enough history to find common ancestor
          echo "Fetching upstream tag: ${{ github.event.inputs.upstream_tag }}"
          git fetch upstream --tags --depth=1000
          
          # Also fetch upstream main for reference  
          git fetch upstream main --depth=1000

      - name: Validate upstream tag
        id: validate_tag
        run: |
          TAG="${{ github.event.inputs.upstream_tag }}"
          echo "Checking if tag '$TAG' exists in upstream..."
          
          # Check if tag exists
          if git ls-remote --tags upstream | grep -q "refs/tags/$TAG"; then
            echo "Tag '$TAG' found in upstream"
            # Get the commit SHA for the tag
            SHA=$(git ls-remote --tags upstream "refs/tags/$TAG" | cut -f1)
            echo "tag_sha=$SHA" >> $GITHUB_OUTPUT
            echo "Tag SHA: $SHA"
          else
            echo "::error::Tag '$TAG' not found in upstream repository"
            exit 1
          fi

      - name: Create sync branch
        id: create_branch
        run: |
          SYNC_BRANCH="sync/upstream-${{ github.event.inputs.upstream_tag }}-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$SYNC_BRANCH" >> $GITHUB_OUTPUT
          
          # Create new branch from target branch
          git checkout -b "$SYNC_BRANCH" "origin/${{ github.event.inputs.target_branch }}"
          echo "Created branch: $SYNC_BRANCH"

      - name: Check for workflow changes
        id: check_workflows
        run: |
          TAG="${{ github.event.inputs.upstream_tag }}"
          echo "Checking for workflow changes in upstream tag..."
          
          # Get the list of workflow files that changed in the upstream tag
          WORKFLOW_CHANGES=$(git diff --name-only HEAD..$TAG -- .github/workflows/ 2>/dev/null || true)
          
          if [ -n "$WORKFLOW_CHANGES" ]; then
            echo "workflow_changes=true" >> $GITHUB_OUTPUT
            echo "Workflow changes detected:"
            echo "$WORKFLOW_CHANGES"
            
            # Save the changes to a file for the summary
            echo "# Workflow Changes Detected" > WORKFLOW_CHANGES.md
            echo "" >> WORKFLOW_CHANGES.md
            echo "⚠️ **The upstream tag \`$TAG\` contains changes to GitHub workflows that were excluded from this merge.**" >> WORKFLOW_CHANGES.md
            echo "" >> WORKFLOW_CHANGES.md
            echo "## Changed workflow files:" >> WORKFLOW_CHANGES.md
            echo "\`\`\`" >> WORKFLOW_CHANGES.md
            echo "$WORKFLOW_CHANGES" >> WORKFLOW_CHANGES.md
            echo "\`\`\`" >> WORKFLOW_CHANGES.md
            echo "" >> WORKFLOW_CHANGES.md
            echo "## What to do:" >> WORKFLOW_CHANGES.md
            echo "1. Review the workflow changes manually" >> WORKFLOW_CHANGES.md
            echo "2. If you want to include them, manually cherry-pick or apply the changes" >> WORKFLOW_CHANGES.md
            echo "3. Test workflow changes in a separate PR for safety" >> WORKFLOW_CHANGES.md
            echo "" >> WORKFLOW_CHANGES.md
            echo "## To see the changes:" >> WORKFLOW_CHANGES.md
            echo "\`\`\`bash" >> WORKFLOW_CHANGES.md
            echo "git fetch upstream --tags" >> WORKFLOW_CHANGES.md
            echo "git diff HEAD..$TAG -- .github/workflows/" >> WORKFLOW_CHANGES.md
            echo "\`\`\`" >> WORKFLOW_CHANGES.md
          else
            echo "workflow_changes=false" >> $GITHUB_OUTPUT
            echo "No workflow changes detected in upstream tag"
          fi

      - name: Merge upstream tag
        id: merge_upstream
        continue-on-error: true
        run: |
          TAG="${{ github.event.inputs.upstream_tag }}"
          STRATEGY="${{ github.event.inputs.merge_strategy }}"
          
          echo "Merging upstream tag: $TAG"
          
          # Create a temporary merge to see what would be included
          echo "Creating temporary merge to analyze changes..."
          git fetch origin "${{ github.event.inputs.target_branch }}"
          
          # Do the merge but don't commit yet
          if [ -n "$STRATEGY" ]; then
            echo "Using merge strategy: $STRATEGY"
            git merge --no-commit --no-ff -X "$STRATEGY" --allow-unrelated-histories "$TAG"
          else
            echo "Using default merge strategy"
            git merge --no-commit --no-ff --allow-unrelated-histories "$TAG"
          fi
          
          # Check if we have workflow changes and revert them before committing
          if [ "${{ steps.check_workflows.outputs.workflow_changes }}" = "true" ]; then
            echo "Detected workflow changes, reverting them before commit..."
            
            # Show what's currently staged
            echo "=== Currently staged files ==="
            git diff --cached --name-only
            
            # Show current workflow directory
            echo "=== Current .github/workflows files ==="
            ls -la .github/workflows/ 2>/dev/null || echo "No workflow directory"
            
            # Restore workflow files to target branch state
            git checkout "origin/${{ github.event.inputs.target_branch }}" -- .github/workflows/
            
            # Add the restored workflow files to staging area
            git add .github/workflows/
            
            echo "=== After workflow revert ==="
            echo "Staged files:"
            git diff --cached --name-only
            echo "Workflow files:"
            ls -la .github/workflows/ 2>/dev/null || echo "No workflow directory"
            
            echo "Workflow files reverted to target branch state"
          else
            echo "No workflow changes detected, proceeding with merge as-is"
          fi
          
          # Final verification - check if any workflow files are still staged
          echo "=== Final verification before commit ==="
          STAGED_WORKFLOWS=$(git diff --cached --name-only | grep "^\.github/workflows/" || true)
          if [ -n "$STAGED_WORKFLOWS" ]; then
            echo "⚠️ WARNING: Workflow files still staged for commit:"
            echo "$STAGED_WORKFLOWS"
            echo "Unstaging workflow files..."
            git reset HEAD -- .github/workflows/
            echo "✅ Workflow files unstaged"
          else
            echo "✅ No workflow files staged for commit"
          fi
          
          # Show final staged files
          echo "=== Final staged files ==="
          git diff --cached --name-only
          
          # Now commit the merge (with workflows excluded)
          git commit --no-edit -m "Merge upstream $TAG"
          echo "Merge completed with workflow exclusions"

      - name: Create sync summary
        run: |
          # Create a summary file to document the sync
          echo "# Upstream Sync Summary" > SYNC_SUMMARY.md
          echo "" >> SYNC_SUMMARY.md
          echo "- **Upstream tag**: ${{ github.event.inputs.upstream_tag }}" >> SYNC_SUMMARY.md
          echo "- **Target branch**: ${{ github.event.inputs.target_branch }}" >> SYNC_SUMMARY.md
          echo "- **Merge strategy**: ${{ github.event.inputs.merge_strategy || 'default' }}" >> SYNC_SUMMARY.md
          echo "- **Sync date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> SYNC_SUMMARY.md
          echo "- **Merge status**: ${{ steps.merge_upstream.outcome == 'failure' && 'Failed (conflicts)' || 'Success' }}" >> SYNC_SUMMARY.md
          echo "- **Workflow changes**: ${{ steps.check_workflows.outputs.workflow_changes == 'true' && '⚠️ Detected (excluded)' || '✅ None' }}" >> SYNC_SUMMARY.md
          
          if [ "${{ steps.merge_upstream.outcome }}" = "success" ]; then
            echo "" >> SYNC_SUMMARY.md
            echo "✅ **Clean merge completed successfully**" >> SYNC_SUMMARY.md
            echo "" >> SYNC_SUMMARY.md
            echo "The upstream changes have been successfully merged into this branch." >> SYNC_SUMMARY.md
          fi
          
          git add SYNC_SUMMARY.md
          
          # Add workflow changes file if it exists
          if [ -f WORKFLOW_CHANGES.md ]; then
            git add WORKFLOW_CHANGES.md
          fi
          
          git commit -m "docs: add sync summary for upstream ${{ github.event.inputs.upstream_tag }}"

      - name: Handle merge conflicts
        if: steps.merge_upstream.outcome == 'failure'
        run: |
          echo "::warning::Merge conflicts detected during upstream sync"
          
          # Check if we're in the middle of a merge and abort if possible
          if [ -f .git/MERGE_HEAD ]; then
            echo "Aborting merge in progress..."
            git merge --abort
          else
            echo "No merge in progress to abort"
          fi
          
          # Update sync summary to reflect conflicts
          echo "" >> SYNC_SUMMARY.md
          echo "⚠️ **Merge conflicts detected**" >> SYNC_SUMMARY.md
          echo "" >> SYNC_SUMMARY.md
          echo "This PR has been created as a draft for manual conflict resolution." >> SYNC_SUMMARY.md
          
          # Create a conflict marker file
          echo "# Merge Conflicts Detected" > MERGE_CONFLICTS.md
          echo "" >> MERGE_CONFLICTS.md
          echo "The merge of upstream tag \`${{ github.event.inputs.upstream_tag }}\` into \`${{ github.event.inputs.target_branch }}\` resulted in conflicts." >> MERGE_CONFLICTS.md
          echo "" >> MERGE_CONFLICTS.md
          echo "This PR has been created as a draft. Please resolve conflicts manually:" >> MERGE_CONFLICTS.md
          echo "1. Clone this branch locally" >> MERGE_CONFLICTS.md
          echo "2. Add upstream remote: \`git remote add upstream https://github.com/danny-avila/LibreChat.git\`" >> MERGE_CONFLICTS.md
          echo "3. Fetch upstream: \`git fetch upstream --tags\`" >> MERGE_CONFLICTS.md
          echo "4. Run: \`git merge ${{ github.event.inputs.upstream_tag }}\`" >> MERGE_CONFLICTS.md
          echo "5. Resolve conflicts and commit" >> MERGE_CONFLICTS.md
          echo "6. Push changes and mark PR as ready for review" >> MERGE_CONFLICTS.md
          
          git add SYNC_SUMMARY.md MERGE_CONFLICTS.md
          
          # Add workflow changes file if it exists
          if [ -f WORKFLOW_CHANGES.md ]; then
            git add WORKFLOW_CHANGES.md
          fi
          
          git commit -m "chore: mark conflicts for upstream ${{ github.event.inputs.upstream_tag }} merge"

      - name: Push sync branch
        run: |
          git push origin "${{ steps.create_branch.outputs.branch_name }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          branch-token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create_branch.outputs.branch_name }}
          base: ${{ github.event.inputs.target_branch }}
          title: "🔄 Sync upstream: ${{ github.event.inputs.upstream_tag }}"
          body: |
            ## Upstream Sync: ${{ github.event.inputs.upstream_tag }}
            
            This PR syncs the upstream tag `${{ github.event.inputs.upstream_tag }}` from [danny-avila/LibreChat](https://github.com/danny-avila/LibreChat) into `${{ github.event.inputs.target_branch }}`.
            
            ### Details
            - **Upstream tag**: `${{ github.event.inputs.upstream_tag }}`
            - **Target branch**: `${{ github.event.inputs.target_branch }}`
            - **Merge strategy**: `${{ github.event.inputs.merge_strategy || 'default' }}`
            - **Triggered by**: @${{ github.actor }}
            
            ### Status
            ${{ steps.merge_upstream.outcome == 'failure' && '⚠️ **Merge conflicts detected** - This PR requires manual resolution' || '✅ **Clean merge** - Ready for review' }}
            
            ${{ steps.check_workflows.outputs.workflow_changes == 'true' && '### ⚠️ Workflow Changes Detected
            
            This upstream tag contains GitHub workflow changes that were **excluded** from this merge for security reasons. See the `WORKFLOW_CHANGES.md` file in this PR for details on what changed and how to review them manually.' || '' }}
            
            ---
            *Automated upstream sync via GitHub Actions*
          draft: ${{ steps.merge_upstream.outcome == 'failure' }}
          labels: |
            upstream-sync
            automated
